<?php
/**
 * CrptNcApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Lamoda\CrptNcApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Национальный каталог
 *
 * API
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lamoda\CrptNcApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Lamoda\CrptNcApiClient\ApiException;
use Lamoda\CrptNcApiClient\Configuration;
use Lamoda\CrptNcApiClient\HeaderSelector;
use Lamoda\CrptNcApiClient\ObjectSerializer;

/**
 * CrptNcApi Class Doc Comment
 *
 * @category Class
 * @package  Lamoda\CrptNcApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CrptNcApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation feedPost
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedRequest $feedRequest feedRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Lamoda\CrptNcApiClient\Model\FeedResponse
     */
    public function feedPost($feedRequest = null)
    {
        list($response) = $this->feedPostWithHttpInfo($feedRequest);
        return $response;
    }

    /**
     * Operation feedPostWithHttpInfo
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedRequest $feedRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Lamoda\CrptNcApiClient\Model\FeedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedPostWithHttpInfo($feedRequest = null)
    {
        $request = $this->feedPostRequest($feedRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Lamoda\CrptNcApiClient\Model\FeedResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Lamoda\CrptNcApiClient\Model\FeedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Lamoda\CrptNcApiClient\Model\FeedResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lamoda\CrptNcApiClient\Model\FeedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedPostAsync
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedRequest $feedRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedPostAsync($feedRequest = null)
    {
        return $this->feedPostAsyncWithHttpInfo($feedRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedRequest $feedRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedPostAsyncWithHttpInfo($feedRequest = null)
    {
        $returnType = '\Lamoda\CrptNcApiClient\Model\FeedResponse';
        $request = $this->feedPostRequest($feedRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedPost'
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedRequest $feedRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function feedPostRequest($feedRequest = null)
    {

        $resourcePath = '/feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($feedRequest)) {
            $_tempBody = $feedRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedProductDocumentPost
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductDocumentRequest $feedProductDocumentRequest feedProductDocumentRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse
     */
    public function feedProductDocumentPost($feedProductDocumentRequest = null)
    {
        list($response) = $this->feedProductDocumentPostWithHttpInfo($feedProductDocumentRequest);
        return $response;
    }

    /**
     * Operation feedProductDocumentPostWithHttpInfo
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductDocumentRequest $feedProductDocumentRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedProductDocumentPostWithHttpInfo($feedProductDocumentRequest = null)
    {
        $request = $this->feedProductDocumentPostRequest($feedProductDocumentRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedProductDocumentPostAsync
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductDocumentRequest $feedProductDocumentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedProductDocumentPostAsync($feedProductDocumentRequest = null)
    {
        return $this->feedProductDocumentPostAsyncWithHttpInfo($feedProductDocumentRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedProductDocumentPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductDocumentRequest $feedProductDocumentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedProductDocumentPostAsyncWithHttpInfo($feedProductDocumentRequest = null)
    {
        $returnType = '\Lamoda\CrptNcApiClient\Model\FeedProductDocumentResponse';
        $request = $this->feedProductDocumentPostRequest($feedProductDocumentRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedProductDocumentPost'
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductDocumentRequest $feedProductDocumentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function feedProductDocumentPostRequest($feedProductDocumentRequest = null)
    {

        $resourcePath = '/feed-product-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($feedProductDocumentRequest)) {
            $_tempBody = $feedProductDocumentRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedProductSignPkcsPost
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsRequest[] $feedProductSignPkcsRequest feedProductSignPkcsRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse
     */
    public function feedProductSignPkcsPost($feedProductSignPkcsRequest = null)
    {
        list($response) = $this->feedProductSignPkcsPostWithHttpInfo($feedProductSignPkcsRequest);
        return $response;
    }

    /**
     * Operation feedProductSignPkcsPostWithHttpInfo
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsRequest[] $feedProductSignPkcsRequest (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedProductSignPkcsPostWithHttpInfo($feedProductSignPkcsRequest = null)
    {
        $request = $this->feedProductSignPkcsPostRequest($feedProductSignPkcsRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedProductSignPkcsPostAsync
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsRequest[] $feedProductSignPkcsRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedProductSignPkcsPostAsync($feedProductSignPkcsRequest = null)
    {
        return $this->feedProductSignPkcsPostAsyncWithHttpInfo($feedProductSignPkcsRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedProductSignPkcsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsRequest[] $feedProductSignPkcsRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedProductSignPkcsPostAsyncWithHttpInfo($feedProductSignPkcsRequest = null)
    {
        $returnType = '\Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsResponse';
        $request = $this->feedProductSignPkcsPostRequest($feedProductSignPkcsRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedProductSignPkcsPost'
     *
     * @param  \Lamoda\CrptNcApiClient\Model\FeedProductSignPkcsRequest[] $feedProductSignPkcsRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function feedProductSignPkcsPostRequest($feedProductSignPkcsRequest = null)
    {

        $resourcePath = '/feed-product-sign-pkcs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($feedProductSignPkcsRequest)) {
            $_tempBody = $feedProductSignPkcsRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedStatusGet
     *
     * @param  int $feedId идентификатор фида (обязательное) (required)
     * @param  bool $verbose формат ответа (необязательный). Может принимать следующие значения false или отсутствует — в ответ выводится стандартный блок ошибок обработки фида(обязательное) true — в ответ будет выведен расширенный ответ по произошедшим ошибкам обработки фида (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Lamoda\CrptNcApiClient\Model\FeedStatusResponse
     */
    public function feedStatusGet($feedId, $verbose = null)
    {
        list($response) = $this->feedStatusGetWithHttpInfo($feedId, $verbose);
        return $response;
    }

    /**
     * Operation feedStatusGetWithHttpInfo
     *
     * @param  int $feedId идентификатор фида (обязательное) (required)
     * @param  bool $verbose формат ответа (необязательный). Может принимать следующие значения false или отсутствует — в ответ выводится стандартный блок ошибок обработки фида(обязательное) true — в ответ будет выведен расширенный ответ по произошедшим ошибкам обработки фида (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Lamoda\CrptNcApiClient\Model\FeedStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedStatusGetWithHttpInfo($feedId, $verbose = null)
    {
        $request = $this->feedStatusGetRequest($feedId, $verbose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Lamoda\CrptNcApiClient\Model\FeedStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Lamoda\CrptNcApiClient\Model\FeedStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Lamoda\CrptNcApiClient\Model\FeedStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lamoda\CrptNcApiClient\Model\FeedStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedStatusGetAsync
     *
     * 
     *
     * @param  int $feedId идентификатор фида (обязательное) (required)
     * @param  bool $verbose формат ответа (необязательный). Может принимать следующие значения false или отсутствует — в ответ выводится стандартный блок ошибок обработки фида(обязательное) true — в ответ будет выведен расширенный ответ по произошедшим ошибкам обработки фида (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedStatusGetAsync($feedId, $verbose = null)
    {
        return $this->feedStatusGetAsyncWithHttpInfo($feedId, $verbose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedStatusGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $feedId идентификатор фида (обязательное) (required)
     * @param  bool $verbose формат ответа (необязательный). Может принимать следующие значения false или отсутствует — в ответ выводится стандартный блок ошибок обработки фида(обязательное) true — в ответ будет выведен расширенный ответ по произошедшим ошибкам обработки фида (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedStatusGetAsyncWithHttpInfo($feedId, $verbose = null)
    {
        $returnType = '\Lamoda\CrptNcApiClient\Model\FeedStatusResponse';
        $request = $this->feedStatusGetRequest($feedId, $verbose);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedStatusGet'
     *
     * @param  int $feedId идентификатор фида (обязательное) (required)
     * @param  bool $verbose формат ответа (необязательный). Может принимать следующие значения false или отсутствует — в ответ выводится стандартный блок ошибок обработки фида(обязательное) true — в ответ будет выведен расширенный ответ по произошедшим ошибкам обработки фида (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function feedStatusGetRequest($feedId, $verbose = null)
    {
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling feedStatusGet'
            );
        }

        $resourcePath = '/feed-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($feedId !== null) {
            if('form' === 'form' && is_array($feedId)) {
                foreach($feedId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['feed_id'] = $feedId;
            }
        }
        // query params
        if ($verbose !== null) {
            if('form' === 'form' && is_array($verbose)) {
                foreach($verbose as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['verbose'] = $verbose;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateGtinsGet
     *
     * @param  int $quantity количество новых черновиков GTIN, которые нужно сгенерировать (обязателен при запросе генерации новых черновиков gtin) (optional)
     * @param  bool $exist признак, обозначающий запрос уже сгенерированных и имеющихся в базе пользователя gtin; принимает значения 1/0 (true/false) (optional)
     * @param  string $supplierKey ключ поставщика или производителя товаров (необязательный параметр) (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse
     */
    public function generateGtinsGet($quantity = null, $exist = null, $supplierKey = null)
    {
        list($response) = $this->generateGtinsGetWithHttpInfo($quantity, $exist, $supplierKey);
        return $response;
    }

    /**
     * Operation generateGtinsGetWithHttpInfo
     *
     * @param  int $quantity количество новых черновиков GTIN, которые нужно сгенерировать (обязателен при запросе генерации новых черновиков gtin) (optional)
     * @param  bool $exist признак, обозначающий запрос уже сгенерированных и имеющихся в базе пользователя gtin; принимает значения 1/0 (true/false) (optional)
     * @param  string $supplierKey ключ поставщика или производителя товаров (необязательный параметр) (optional)
     *
     * @throws \Lamoda\CrptNcApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateGtinsGetWithHttpInfo($quantity = null, $exist = null, $supplierKey = null)
    {
        $request = $this->generateGtinsGetRequest($quantity, $exist, $supplierKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateGtinsGetAsync
     *
     * 
     *
     * @param  int $quantity количество новых черновиков GTIN, которые нужно сгенерировать (обязателен при запросе генерации новых черновиков gtin) (optional)
     * @param  bool $exist признак, обозначающий запрос уже сгенерированных и имеющихся в базе пользователя gtin; принимает значения 1/0 (true/false) (optional)
     * @param  string $supplierKey ключ поставщика или производителя товаров (необязательный параметр) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateGtinsGetAsync($quantity = null, $exist = null, $supplierKey = null)
    {
        return $this->generateGtinsGetAsyncWithHttpInfo($quantity, $exist, $supplierKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateGtinsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $quantity количество новых черновиков GTIN, которые нужно сгенерировать (обязателен при запросе генерации новых черновиков gtin) (optional)
     * @param  bool $exist признак, обозначающий запрос уже сгенерированных и имеющихся в базе пользователя gtin; принимает значения 1/0 (true/false) (optional)
     * @param  string $supplierKey ключ поставщика или производителя товаров (необязательный параметр) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateGtinsGetAsyncWithHttpInfo($quantity = null, $exist = null, $supplierKey = null)
    {
        $returnType = '\Lamoda\CrptNcApiClient\Model\GenerateGtinsResponse';
        $request = $this->generateGtinsGetRequest($quantity, $exist, $supplierKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateGtinsGet'
     *
     * @param  int $quantity количество новых черновиков GTIN, которые нужно сгенерировать (обязателен при запросе генерации новых черновиков gtin) (optional)
     * @param  bool $exist признак, обозначающий запрос уже сгенерированных и имеющихся в базе пользователя gtin; принимает значения 1/0 (true/false) (optional)
     * @param  string $supplierKey ключ поставщика или производителя товаров (необязательный параметр) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateGtinsGetRequest($quantity = null, $exist = null, $supplierKey = null)
    {

        $resourcePath = '/generate-gtins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quantity !== null) {
            if('form' === 'form' && is_array($quantity)) {
                foreach($quantity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['quantity'] = $quantity;
            }
        }
        // query params
        if ($exist !== null) {
            if('form' === 'form' && is_array($exist)) {
                foreach($exist as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['exist'] = $exist;
            }
        }
        // query params
        if ($supplierKey !== null) {
            if('form' === 'form' && is_array($supplierKey)) {
                foreach($supplierKey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['supplier_key'] = $supplierKey;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
