<?php
/**
 * FeedRequestGoodAttrs
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Lamoda\CrptNcApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Национальный каталог
 *
 * API
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lamoda\CrptNcApiClient\Model;

use \ArrayAccess;
use \Lamoda\CrptNcApiClient\ObjectSerializer;

/**
 * FeedRequestGoodAttrs Class Doc Comment
 *
 * @category Class
 * @description массив атрибутов (необязательный)
 * @package  Lamoda\CrptNcApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FeedRequestGoodAttrs implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeedRequest_good_attrs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attrId' => 'int',
        'attrValue' => 'string',
        'attrValueType' => 'string',
        'gtin' => 'string',
        'delete' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attrId' => null,
        'attrValue' => null,
        'attrValueType' => null,
        'gtin' => null,
        'delete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attrId' => 'attr_id',
        'attrValue' => 'attr_value',
        'attrValueType' => 'attr_value_type',
        'gtin' => 'gtin',
        'delete' => 'delete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attrId' => 'setAttrId',
        'attrValue' => 'setAttrValue',
        'attrValueType' => 'setAttrValueType',
        'gtin' => 'setGtin',
        'delete' => 'setDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attrId' => 'getAttrId',
        'attrValue' => 'getAttrValue',
        'attrValueType' => 'getAttrValueType',
        'gtin' => 'getGtin',
        'delete' => 'getDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attrId'] = $data['attrId'] ?? null;
        $this->container['attrValue'] = $data['attrValue'] ?? null;
        $this->container['attrValueType'] = $data['attrValueType'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['delete'] = $data['delete'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attrId
     *
     * @return int|null
     */
    public function getAttrId()
    {
        return $this->container['attrId'];
    }

    /**
     * Sets attrId
     *
     * @param int|null $attrId идентификатора атрибута (обязательный при создании товара)
     *
     * @return self
     */
    public function setAttrId($attrId)
    {
        $this->container['attrId'] = $attrId;

        return $this;
    }

    /**
     * Gets attrValue
     *
     * @return string|null
     */
    public function getAttrValue()
    {
        return $this->container['attrValue'];
    }

    /**
     * Sets attrValue
     *
     * @param string|null $attrValue значение атрибута (обязательный при создании товара; необязательный при редактировании и удалении)
     *
     * @return self
     */
    public function setAttrValue($attrValue)
    {
        $this->container['attrValue'] = $attrValue;

        return $this;
    }

    /**
     * Gets attrValueType
     *
     * @return string|null
     */
    public function getAttrValueType()
    {
        return $this->container['attrValueType'];
    }

    /**
     * Sets attrValueType
     *
     * @param string|null $attrValueType тип значение атрибута (необязательный)
     *
     * @return self
     */
    public function setAttrValueType($attrValueType)
    {
        $this->container['attrValueType'] = $attrValueType;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin значение gtin (необязательный)
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return int|null
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param int|null $delete со значением 1 - удаление атрибута товара (необязательный). Доступно только при редактировании существующего товара. При передаче данного параметра, обязательно указать attr_value_id
     *
     * @return self
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


